[{"path":"https://drostlab.github.io/edgynode/articles/Introduction.html","id":"table-of-contents","dir":"Articles","previous_headings":"","what":"Table of Contents","title":"Introduction to the edgynode package","text":"edgynode? Installation [Motivation] Performing Example Workflow edgynode analysis","code":""},{"path":"https://drostlab.github.io/edgynode/articles/Introduction.html","id":"why-edgynode","dir":"Articles","previous_headings":"Table of Contents","what":"Why edgynode?","title":"Introduction to the edgynode package","text":"maturation (single-cell) sequencing technologies across modalities, inference gene regulatory networks (GRN) increasingly feasible. Yet, lack simple powerful statistical package compare GRN inference outcomes. edgynode package imports inferred gene regulatory networks performs network statistics network simulation procedures investigate topology structure GRN hand.","code":""},{"path":"https://drostlab.github.io/edgynode/articles/Introduction.html","id":"installation","dir":"Articles","previous_headings":"Table of Contents","what":"Installation","title":"Introduction to the edgynode package","text":"``` ``","code":""},{"path":"https://drostlab.github.io/edgynode/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hajk-Georg Drost. Maintainer, author, contributor. Ilias Moutsopoulos. Author, contributor. lmshk. Author, contributor. Sergio Vasquez. Author, contributor. Irina Mohorianu. Contributor.","code":""},{"path":"https://drostlab.github.io/edgynode/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Drost H, Moutsopoulos , lmshk, Vasquez S (2023). edgynode: Comparison Gene Regulatory Networks. R package version 1.0.0.","code":"@Manual{,   title = {edgynode: Comparison of Gene Regulatory Networks},   author = {Hajk-Georg Drost and Ilias Moutsopoulos and {lmshk} and Sergio Vasquez},   year = {2023},   note = {R package version 1.0.0}, }"},{"path":[]},{"path":[]},{"path":"https://drostlab.github.io/edgynode/index.html","id":"motivation","dir":"","previous_headings":"Statistical Assessment and Visualization of Gene Regulatory Networks","what":"Motivation","title":"Comparison of Gene Regulatory Networks","text":"expression genes fundamental molecular mechanism allowing organisms produce proteins govern functional aspects living cells. past years, complex regulatory mechanisms described place transcription factors (TFs), transposable elements (TEs), regulatory RNA main actors governing gene expression. Deciphering interactions genes regulators various biological contexts development stress response immense interest life scientists. Given recent advancements next-generation sequencing technologies, inference regulatory interactions (single-cell) RNAseq, ChIPseq, ATACseq data become feasible able paint genome-wide picture gene regulation.","code":""},{"path":"https://drostlab.github.io/edgynode/index.html","id":"short-package-description","dir":"","previous_headings":"Statistical Assessment and Visualization of Gene Regulatory Networks","what":"Short package description","title":"Comparison of Gene Regulatory Networks","text":"edgynode package imports inferred gene regulatory networks performs network statistics network simulation procedures investigate topology structure GRN hand.","code":""},{"path":"https://drostlab.github.io/edgynode/index.html","id":"install-edgynode","dir":"","previous_headings":"","what":"Install edgynode","title":"Comparison of Gene Regulatory Networks","text":"","code":"# install edgynode from GitHub devtools::install_github(\"drostlab/edgynode\")"},{"path":[]},{"path":"https://drostlab.github.io/edgynode/index.html","id":"small-example-with-internal-dataset","dir":"","previous_headings":"Example","what":"Small example with internal dataset","title":"Comparison of Gene Regulatory Networks","text":"","code":"# library(edgynode)  # Benchmark GENIE3 inferred networks with raw, no_noise, and quantile_norm combinations genie3_49_raw <- as.matrix(read.csv( system.file(\"data/network_raw_49_placenta_development.csv\",  package = \"edgynode\"), row.names = 1))  genie3_49_noNoiseCM_raw <- as.matrix(read.csv( system.file(\"data/network_noNoiseCM_raw_49_placenta_development.csv\",  package = \"edgynode\"), row.names = 1))  genie3_49_qnorm_no_noise_removed <- as.matrix(read.csv( system.file(\"data/network_qnorm_49_placenta_development.csv\",  package = \"edgynode\"), row.names = 1))  genie3_49_noNoiseCM_qnorm <- as.matrix(read.csv( system.file(\"data/network_noNoiseCM_qnorm_49_placenta_development.csv\",  package = \"edgynode\"), row.names = 1))  # Run Benchmark using Hamming distance benchmark_hamming <- edgynode::network_benchmark_noise_filtering( genie3_49_raw, genie3_49_noNoiseCM_raw, genie3_49_qnorm_no_noise_removed, genie3_49_noNoiseCM_qnorm, dist_type = \"hamming\", grn_tool = \"GENIE3\")  # visualize at results edgynode::plot_network_benchmark_noise_filtering(benchmark_hamming,             dist_type = \"hamming\",              title = \"Network Inference Tool: GENIE3\")"},{"path":"https://drostlab.github.io/edgynode/reference/assert_adjacency.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether a matrix fulfills the edgynode adjacency\nmatrix convention — assert_adjacency","title":"Check whether a matrix fulfills the edgynode adjacency\nmatrix convention — assert_adjacency","text":"Imports matrix tests whether adjacency edgynode format.","code":""},{"path":"https://drostlab.github.io/edgynode/reference/assert_adjacency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether a matrix fulfills the edgynode adjacency\nmatrix convention — assert_adjacency","text":"","code":"assert_adjacency(x)"},{"path":"https://drostlab.github.io/edgynode/reference/assert_adjacency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether a matrix fulfills the edgynode adjacency\nmatrix convention — assert_adjacency","text":"x matrix object.","code":""},{"path":"https://drostlab.github.io/edgynode/reference/assert_adjacency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check whether a matrix fulfills the edgynode adjacency\nmatrix convention — assert_adjacency","text":"informative error test fails, NULL otherwise","code":""},{"path":[]},{"path":"https://drostlab.github.io/edgynode/reference/assert_adjacency.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check whether a matrix fulfills the edgynode adjacency\nmatrix convention — assert_adjacency","text":"Ilias Moutsopoulos Hajk-Georg Drost","code":""},{"path":"https://drostlab.github.io/edgynode/reference/assert_adjacency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check whether a matrix fulfills the edgynode adjacency\nmatrix convention — assert_adjacency","text":"","code":"# test with an already clean adjacency matrix edgynode::assert_adjacency(edgynode::adjacency_clean_test_3)  # look at raw matrix edgynode::adjacency_matrix_test_3 #>      [,1] [,2] [,3] #> [1,]    0   -1    2 #> [2,]    1    2    4 #> [3,]    4    0    0 # convert raw matrix into a edgynode adjacency matrix clean_matrix <- edgynode::make_adjacency(edgynode::adjacency_matrix_test_3) # test converted matrix edgynode::assert_adjacency(clean_matrix)"},{"path":"https://drostlab.github.io/edgynode/reference/convert_adj_to_edges.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an adjacency matrix to an edge list — convert_adj_to_edges","title":"Convert an adjacency matrix to an edge list — convert_adj_to_edges","text":"function takes adjacency matrix transforms edge list","code":""},{"path":"https://drostlab.github.io/edgynode/reference/convert_adj_to_edges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an adjacency matrix to an edge list — convert_adj_to_edges","text":"","code":"convert_adj_to_edges(adj)"},{"path":"https://drostlab.github.io/edgynode/reference/convert_adj_to_edges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an adjacency matrix to an edge list — convert_adj_to_edges","text":"adj adjacency matrix","code":""},{"path":"https://drostlab.github.io/edgynode/reference/convert_adj_to_edges.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert an adjacency matrix to an edge list — convert_adj_to_edges","text":"Ilias Moutsopoulos","code":""},{"path":"https://drostlab.github.io/edgynode/reference/convert_edges_to_adj.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert an edge list to an adjacency matrix — convert_edges_to_adj","title":"Convert an edge list to an adjacency matrix — convert_edges_to_adj","text":"function takes edge list transforms adjacency matrix","code":""},{"path":"https://drostlab.github.io/edgynode/reference/convert_edges_to_adj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert an edge list to an adjacency matrix — convert_edges_to_adj","text":"","code":"convert_edges_to_adj(edges)"},{"path":"https://drostlab.github.io/edgynode/reference/convert_edges_to_adj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert an edge list to an adjacency matrix — convert_edges_to_adj","text":"edges edge list data frame, 2 3 columns (, , value)","code":""},{"path":"https://drostlab.github.io/edgynode/reference/convert_edges_to_adj.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert an edge list to an adjacency matrix — convert_edges_to_adj","text":"Ilias Moutsopoulos","code":""},{"path":"https://drostlab.github.io/edgynode/reference/import_genie3.html","id":null,"dir":"Reference","previous_headings":"","what":"Output Parser for GENIE3 — import_genie3","title":"Output Parser for GENIE3 — import_genie3","text":"function parses standard output generated BEELINE tool GENIE3.","code":""},{"path":"https://drostlab.github.io/edgynode/reference/import_genie3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Output Parser for GENIE3 — import_genie3","text":"","code":"import_genie3(filename)"},{"path":"https://drostlab.github.io/edgynode/reference/import_genie3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Output Parser for GENIE3 — import_genie3","text":"filename file path GENIE3 output file generated BEELINE.","code":""},{"path":"https://drostlab.github.io/edgynode/reference/import_genie3.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Output Parser for GENIE3 — import_genie3","text":"Ilias Moutsopoulos","code":""},{"path":"https://drostlab.github.io/edgynode/reference/import_genie3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Output Parser for GENIE3 — import_genie3","text":"","code":"# path to GENIE3 output file genie3_output <- system.file('beeline_examples/GENIE3/outFile.csv', package = 'edgynode') # import GENIE3 specific output genie3_parsed <- import_genie3(genie3_output) # look at output head(genie3_parsed) #>             1           2           3           4           5           6 #> 1 0.000000000 0.001811768 0.002527516 0.001600692 0.007822955 0.014570000 #> 2 0.004683832 0.000000000 0.000899976 0.001231326 0.000934666 0.019812741 #> 3 0.000818507 0.000401128 0.000000000 0.000378689 0.002037873 0.000449344 #> 4 0.002058281 0.001074273 0.000759202 0.000000000 0.002517662 0.013710792 #> 5 0.009624758 0.001485686 0.000651459 0.000718736 0.000000000 0.001166166 #> 6 0.006107204 0.000625866 0.009252517 0.009736919 0.001499439 0.000000000 #>             7           8           9          10          11          12 #> 1 0.000614238 0.001137291 0.002337975 0.014415220 0.000613425 0.000272936 #> 2 0.001141631 0.006656387 0.001106136 0.001133366 0.000897099 0.003933751 #> 3 0.000555048 0.000254030 0.001367819 0.001644449 0.000360363 0.000480796 #> 4 0.011445048 0.007987994 0.000531008 0.001136500 0.010789207 0.009114084 #> 5 0.001737508 0.001627787 0.001402951 0.011878662 0.000156414 0.001505301 #> 6 0.001322267 0.002897071 0.000391696 0.001775905 0.003618350 0.001708483 #>            13          14          15          16          17          18 #> 1 0.000139971 0.000180398 0.000341667 0.000162978 0.007272917 0.000339506 #> 2 0.009363876 0.008004868 0.008832093 0.002471287 0.000887332 0.006682960 #> 3 0.000670682 0.000081400 0.001118088 0.000248468 0.000188017 0.000369289 #> 4 0.000343480 0.003941266 0.001804841 0.000622126 0.003976774 0.012182730 #> 5 0.000258570 0.001316602 0.001188003 0.000400262 0.003531343 0.003200529 #> 6 0.000144770 0.000603730 0.000676832 0.000345237 0.001174498 0.001040460 #>            19          20          21          22          23          24 #> 1 0.001633523 0.002492059 0.001426930 0.000375548 0.006144706 0.001458464 #> 2 0.004564668 0.004507823 0.011631158 0.009612176 0.005727211 0.009120935 #> 3 0.000388426 0.000540248 0.001173310 0.000292040 0.001115590 0.000961417 #> 4 0.030850650 0.005446657 0.009927390 0.010751074 0.004193097 0.002284318 #> 5 0.000748385 0.002362615 0.000291163 0.002709149 0.001982560 0.000791683 #> 6 0.008642205 0.003474730 0.011531262 0.000583089 0.026480291 0.002111584 #>            25          26          27          28          29          30 #> 1 0.004309645 0.001055343 0.000607024 0.000795218 0.000471033 0.004048368 #> 2 0.000522500 0.005999281 0.003702300 0.010310131 0.014402373 0.017200446 #> 3 0.002126600 0.000947297 0.002185341 0.001266844 0.000179786 0.000719473 #> 4 0.000611327 0.009903342 0.000598064 0.009091325 0.003108009 0.010024553 #> 5 0.002363166 0.003645343 0.000628335 0.000694515 0.004243434 0.004162145 #> 6 0.000783757 0.001114188 0.001079321 0.002393912 0.000668560 0.027663730 #>            31          32          33          34          35          36 #> 1 0.000377236 0.000077000 0.001690522 0.000677272 0.009876363 0.002793056 #> 2 0.006753769 0.009218626 0.000514381 0.003499844 0.002286351 0.008582426 #> 3 0.000800753 0.000424451 0.004534643 0.000968003 0.040979519 0.000647926 #> 4 0.000651561 0.001237797 0.004597500 0.014475334 0.001635102 0.009287202 #> 5 0.003694673 0.002022132 0.016322268 0.001798063 0.002553983 0.006366397 #> 6 0.001574273 0.000010700 0.009982464 0.000941228 0.001207826 0.001206071 #>            37          38          39          40          41          42 #> 1 0.000418299 0.001086571 0.001859664 0.000706340 0.000402723 0.005341980 #> 2 0.006275232 0.009418549 0.001325209 0.003285850 0.002535042 0.005107540 #> 3 0.000376181 0.002833440 0.001202262 0.000590021 0.000479144 0.000483450 #> 4 0.003603117 0.005149083 0.004318793 0.000723914 0.002387099 0.017328867 #> 5 0.001433742 0.005400964 0.005655393 0.000493031 0.001490204 0.002009821 #> 6 0.000805408 0.000221626 0.006194245 0.000164886 0.000594463 0.005862752 #>            43          44          45          46          47          48 #> 1 0.017874460 0.000470329 0.002574491 0.014395973 0.001754442 0.000189734 #> 2 0.000561636 0.002995138 0.000886438 0.016854307 0.005975931 0.001452513 #> 3 0.001431351 0.001879077 0.000871355 0.001302475 0.001061734 0.001175529 #> 4 0.000546449 0.001624774 0.005206282 0.015125885 0.000856922 0.001655530 #> 5 0.020451547 0.001568640 0.002365076 0.000465389 0.000790391 0.001043327 #> 6 0.001201939 0.001205396 0.023639153 0.033836115 0.000254209 0.000418905 #>            49          50 #> 1 0.001338362 0.001233032 #> 2 0.001857281 0.000122439 #> 3 0.003057971 0.000413775 #> 4 0.000568662 0.024734126 #> 5 0.000408109 0.008626785 #> 6 0.000906036 0.002000708"},{"path":"https://drostlab.github.io/edgynode/reference/is_adjacency.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether a matrix fulfills  the edgynode\nadjacency matrix convention — is_adjacency","title":"Check whether a matrix fulfills  the edgynode\nadjacency matrix convention — is_adjacency","text":"Tests whether matrix adjacency edgynode format.","code":""},{"path":"https://drostlab.github.io/edgynode/reference/is_adjacency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether a matrix fulfills  the edgynode\nadjacency matrix convention — is_adjacency","text":"","code":"is_adjacency(x)"},{"path":"https://drostlab.github.io/edgynode/reference/is_adjacency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether a matrix fulfills  the edgynode\nadjacency matrix convention — is_adjacency","text":"x matrix object.","code":""},{"path":"https://drostlab.github.io/edgynode/reference/is_adjacency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check whether a matrix fulfills  the edgynode\nadjacency matrix convention — is_adjacency","text":"result test (TRUE/FALSE)","code":""},{"path":[]},{"path":"https://drostlab.github.io/edgynode/reference/is_adjacency.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check whether a matrix fulfills  the edgynode\nadjacency matrix convention — is_adjacency","text":"Ilias Moutsopoulos Hajk-Georg Drost","code":""},{"path":"https://drostlab.github.io/edgynode/reference/is_adjacency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check whether a matrix fulfills  the edgynode\nadjacency matrix convention — is_adjacency","text":"","code":"# test with an already clean adjacency matrix edgynode::is_adjacency(edgynode::adjacency_clean_test_3) #> [1] TRUE # look at raw matrix edgynode::adjacency_matrix_test_3 #>      [,1] [,2] [,3] #> [1,]    0   -1    2 #> [2,]    1    2    4 #> [3,]    4    0    0 # convert raw matrix into a edgynode adjacency matrix clean_matrix <- edgynode::make_adjacency(edgynode::adjacency_matrix_test_3) # test converted matrix edgynode::is_adjacency(clean_matrix) #> [1] TRUE"},{"path":"https://drostlab.github.io/edgynode/reference/is_binary.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a numeric matrix generated with make_adjacency and make_binary is binary — is_binary","title":"Check if a numeric matrix generated with make_adjacency and make_binary is binary — is_binary","text":"function takes adjacency matrix input checks binary","code":""},{"path":"https://drostlab.github.io/edgynode/reference/is_binary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a numeric matrix generated with make_adjacency and make_binary is binary — is_binary","text":"","code":"is_binary(adj)"},{"path":"https://drostlab.github.io/edgynode/reference/is_binary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a numeric matrix generated with make_adjacency and make_binary is binary — is_binary","text":"adj adjacency matrix converted raw input matrix via make_adjacency optionally binarised make_binary.","code":""},{"path":"https://drostlab.github.io/edgynode/reference/is_binary.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check if a numeric matrix generated with make_adjacency and make_binary is binary — is_binary","text":"Ilias Moutsopoulos","code":""},{"path":"https://drostlab.github.io/edgynode/reference/is_standard.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a numeric matrix generated with make_adjacency fulfills the edgynode standard format — is_standard","title":"Check if a numeric matrix generated with make_adjacency fulfills the edgynode standard format — is_standard","text":"function takes adjacency matrix input checks standard form (based options provided).","code":""},{"path":"https://drostlab.github.io/edgynode/reference/is_standard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a numeric matrix generated with make_adjacency fulfills the edgynode standard format — is_standard","text":"","code":"is_standard(adj, max_value = 1, no_negative = TRUE, no_self_loops = TRUE)"},{"path":"https://drostlab.github.io/edgynode/reference/is_standard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a numeric matrix generated with make_adjacency fulfills the edgynode standard format — is_standard","text":"adj adjacency matrix converted raw input matrix via make_adjacency. max_value maximum (positive) value exist matrix; default 1; setting NULL max(abs(adj)) leaves values unchanged no_negative whether negative values just absolute value (e.g. case correlations); default no_negative = TRUE. no_self_loops whether values main diagonal adjacency matrix 0; default no_negative = TRUE.","code":""},{"path":"https://drostlab.github.io/edgynode/reference/is_standard.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check if a numeric matrix generated with make_adjacency fulfills the edgynode standard format — is_standard","text":"Ilias Moutsopoulos","code":""},{"path":"https://drostlab.github.io/edgynode/reference/is_symmetric.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a make_adjacency converted matrix is symmetric — is_symmetric","title":"Check if a make_adjacency converted matrix is symmetric — is_symmetric","text":"function takes adjacency matrix input checks symmetric.","code":""},{"path":"https://drostlab.github.io/edgynode/reference/is_symmetric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a make_adjacency converted matrix is symmetric — is_symmetric","text":"","code":"is_symmetric(adj)"},{"path":"https://drostlab.github.io/edgynode/reference/is_symmetric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a make_adjacency converted matrix is symmetric — is_symmetric","text":"adj adjacency matrix converted raw input matrix via make_adjacency.","code":""},{"path":[]},{"path":"https://drostlab.github.io/edgynode/reference/is_symmetric.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check if a make_adjacency converted matrix is symmetric — is_symmetric","text":"Ilias Moutsopoulos Hajk-Georg Drost","code":""},{"path":"https://drostlab.github.io/edgynode/reference/is_symmetric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a make_adjacency converted matrix is symmetric — is_symmetric","text":"","code":"# look at raw matrix edgynode::adjacency_matrix_test_3 #>      [,1] [,2] [,3] #> [1,]    0   -1    2 #> [2,]    1    2    4 #> [3,]    4    0    0 # convert raw matrix into a edgynode adjacency matrix clean_matrix <- edgynode::make_adjacency(edgynode::adjacency_matrix_test_3) # make clean matrix symmetric clean_matrix_symm <- edgynode::make_symmetric(clean_matrix) # look at symmetric matrix clean_matrix_symm #>    N1 N2 N3 #> N1  0  1  4 #> N2  1  2  4 #> N3  4  4  0 #> attr(,\"class\") #> [1] \"adjacency\" \"matrix\"    \"array\"     #> attr(,\"known_symmetric\") #> [1] TRUE #> attr(,\"known_binary\") #> [1] FALSE # test converted matrix edgynode::is_symmetric(clean_matrix_symm) #> [1] TRUE"},{"path":"https://drostlab.github.io/edgynode/reference/make_adjacency.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a raw input matrix into an edgynode adjacency matrix — make_adjacency","title":"Convert a raw input matrix into an edgynode adjacency matrix — make_adjacency","text":"Users may work vast variety input matrices derived various gene regulatory network inference methods tools various values value ranges. function aims ensure raw data converted edgynode adjacency matrix format first conversion step importing existing raw adjacency matrices edgynode ecosystem.","code":""},{"path":"https://drostlab.github.io/edgynode/reference/make_adjacency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a raw input matrix into an edgynode adjacency matrix — make_adjacency","text":"","code":"make_adjacency(x, known_symmetric = FALSE, known_binary = FALSE)"},{"path":"https://drostlab.github.io/edgynode/reference/make_adjacency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a raw input matrix into an edgynode adjacency matrix — make_adjacency","text":"x matrix object. known_symmetric logical value indicating whether input matrix x already known symmetric (case use known_symmetric = TRUE) (case use known_symmetric = FALSE (default)). known_binary logical value indicating whether input matrix x already known binary matrix (case use known_binary = TRUE) (case use known_binary = FALSE (default)).","code":""},{"path":"https://drostlab.github.io/edgynode/reference/make_adjacency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a raw input matrix into an edgynode adjacency matrix — make_adjacency","text":"input matrix, converted adjacency","code":""},{"path":[]},{"path":"https://drostlab.github.io/edgynode/reference/make_adjacency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a raw input matrix into an edgynode adjacency matrix — make_adjacency","text":"","code":"# look at raw matrix edgynode::adjacency_matrix_test_3 #>      [,1] [,2] [,3] #> [1,]    0   -1    2 #> [2,]    1    2    4 #> [3,]    4    0    0 # convert raw matrix into a edgynode adjacency matrix edgynode::make_adjacency(edgynode::adjacency_matrix_test_3) #>    N1 N2 N3 #> N1  0 -1  2 #> N2  1  2  4 #> N3  4  0  0 #> attr(,\"class\") #> [1] \"adjacency\" \"matrix\"    \"array\"     #> attr(,\"known_symmetric\") #> [1] FALSE #> attr(,\"known_binary\") #> [1] FALSE"},{"path":"https://drostlab.github.io/edgynode/reference/make_binary.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a numeric matrix generated with make_adjacency into a binary matrix — make_binary","title":"Convert a numeric matrix generated with make_adjacency into a binary matrix — make_binary","text":"function takes adjacency matrix generated make_adjacency input converts binary matrix using binarization threshold.","code":""},{"path":"https://drostlab.github.io/edgynode/reference/make_binary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a numeric matrix generated with make_adjacency into a binary matrix — make_binary","text":"","code":"make_binary(adj, threshold, output_plot = FALSE)"},{"path":"https://drostlab.github.io/edgynode/reference/make_binary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a numeric matrix generated with make_adjacency into a binary matrix — make_binary","text":"adj adjacency matrix converted raw input matrix via make_adjacency. threshold numeric value within range min(adj) < threshold <= max(adj) input used binarisation.","code":""},{"path":"https://drostlab.github.io/edgynode/reference/make_binary.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert a numeric matrix generated with make_adjacency into a binary matrix — make_binary","text":"Ilias Moutsopoulos Hajk-Georg Drost","code":""},{"path":"https://drostlab.github.io/edgynode/reference/make_binary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a numeric matrix generated with make_adjacency into a binary matrix — make_binary","text":"","code":"# look at raw matrix edgynode::adjacency_matrix_test_3 #>      [,1] [,2] [,3] #> [1,]    0   -1    2 #> [2,]    1    2    4 #> [3,]    4    0    0 # convert raw matrix into a edgynode adjacency matrix edgynode_matrix <- edgynode::make_adjacency(edgynode::adjacency_matrix_test_3) # convert into a binary matrix edgynode_matrix_binary <- edgynode::make_binary(edgynode_matrix, threshold = 1) # look at result edgynode_matrix_binary #>    N1 N2 N3 #> N1  0  0  1 #> N2  1  1  1 #> N3  1  0  0 #> attr(,\"class\") #> [1] \"adjacency\" \"matrix\"    \"array\"     #> attr(,\"known_symmetric\") #> [1] FALSE #> attr(,\"known_binary\") #> [1] TRUE"},{"path":"https://drostlab.github.io/edgynode/reference/make_standard.html","id":null,"dir":"Reference","previous_headings":"","what":"Force a numeric matrix generated with make_adjacency into the edgynode standard matrix format — make_standard","title":"Force a numeric matrix generated with make_adjacency into the edgynode standard matrix format — make_standard","text":"function takes adjacency matrix input converts standard form (based options provided).","code":""},{"path":"https://drostlab.github.io/edgynode/reference/make_standard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Force a numeric matrix generated with make_adjacency into the edgynode standard matrix format — make_standard","text":"","code":"make_standard(   adj,   max_value = 1,   split_by_margin = NULL,   no_negative = TRUE,   no_self_loops = TRUE )"},{"path":"https://drostlab.github.io/edgynode/reference/make_standard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Force a numeric matrix generated with make_adjacency into the edgynode standard matrix format — make_standard","text":"adj adjacency matrix converted raw input matrix via make_adjacency. max_value maximum (positive) value exist matrix; default 1; setting NULL max(abs(adj)) leaves values unchanged no_negative whether negative values just absolute value (e.g. case correlations); default no_negative = TRUE. no_self_loops whether values main diagonal adjacency matrix 0; default no_negative = TRUE.","code":""},{"path":[]},{"path":"https://drostlab.github.io/edgynode/reference/make_standard.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Force a numeric matrix generated with make_adjacency into the edgynode standard matrix format — make_standard","text":"Ilias Moutsopoulos","code":""},{"path":"https://drostlab.github.io/edgynode/reference/make_symmetric.html","id":null,"dir":"Reference","previous_headings":"","what":"Force a matrix into being symmetric — make_symmetric","title":"Force a matrix into being symmetric — make_symmetric","text":"function takes adjacency matrix input forces symmetric.","code":""},{"path":"https://drostlab.github.io/edgynode/reference/make_symmetric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Force a matrix into being symmetric — make_symmetric","text":"","code":"make_symmetric(adj, method = pmax)"},{"path":"https://drostlab.github.io/edgynode/reference/make_symmetric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Force a matrix into being symmetric — make_symmetric","text":"adj adjacency matrix method element-wise function applied matrix transpose; default pmax","code":""},{"path":"https://drostlab.github.io/edgynode/reference/make_symmetric.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Force a matrix into being symmetric — make_symmetric","text":"Ilias Moutsopoulos","code":""},{"path":"https://drostlab.github.io/edgynode/reference/metric_dist_delta_con.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate graph distance based on DeltaCon — metric_dist_delta_con","title":"Calculate graph distance based on DeltaCon — metric_dist_delta_con","text":"Computes distance two graphs using DeltaCon method.","code":""},{"path":"https://drostlab.github.io/edgynode/reference/metric_dist_delta_con.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate graph distance based on DeltaCon — metric_dist_delta_con","text":"","code":"metric_dist_delta_con(adj1, adj2, .MAX_POWER = 10)"},{"path":"https://drostlab.github.io/edgynode/reference/metric_dist_delta_con.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate graph distance based on DeltaCon — metric_dist_delta_con","text":"adj1, adj2 adjacency matrices .MAX_POWER maximum power matrix inversion","code":""},{"path":"https://drostlab.github.io/edgynode/reference/metric_dist_delta_con.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate graph distance based on DeltaCon — metric_dist_delta_con","text":"DeltaCon score adj1 adj2 (scalar)","code":""},{"path":"https://drostlab.github.io/edgynode/reference/metric_dist_delta_con.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate graph distance based on DeltaCon — metric_dist_delta_con","text":"D. Koutra, J. T. Vogelstein, C. Faloutsos: DeltaCon: Principled Massive-Graph Similarity Function. SIAM 2013: 162–170. D. Koutra, T. Ke, U. Kang, D. H. Chau, H. K. Pao, C. Faloutsos: Unifying Guilt--Association Approaches: Theorems Fast Algorithms. ECML/PKDD (2) 2011: 245-260","code":""},{"path":"https://drostlab.github.io/edgynode/reference/summary_delta_con_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate DeltaCon similarity — summary_delta_con_similarity","title":"Calculate DeltaCon similarity — summary_delta_con_similarity","text":"Computes similarity matrix adjacency based DeltaCon method. Adapted previous implementation Baoxu(Dash) Shi, Data Sciense Group, University Notre Dame","code":""},{"path":"https://drostlab.github.io/edgynode/reference/summary_delta_con_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate DeltaCon similarity — summary_delta_con_similarity","text":"","code":"summary_delta_con_similarity(adj, degrees, .MAX_POWER = 10, debug = FALSE)"},{"path":"https://drostlab.github.io/edgynode/reference/summary_delta_con_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate DeltaCon similarity — summary_delta_con_similarity","text":"adj adjacency matrix degrees vector node degrees .MAX_POWER maximum power matrix inversion debug TRUE, function gives time spent step","code":""},{"path":"https://drostlab.github.io/edgynode/reference/summary_delta_con_similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate DeltaCon similarity — summary_delta_con_similarity","text":"similarity matrix S described DeltaCon method","code":""},{"path":"https://drostlab.github.io/edgynode/reference/summary_delta_con_similarity.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate DeltaCon similarity — summary_delta_con_similarity","text":"D. Koutra, J. T. Vogelstein, C. Faloutsos: DeltaCon: Principled Massive-Graph Similarity Function. SIAM 2013: 162-170. D. Koutra, T. Ke, U. Kang, D. H. Chau, H. K. Pao, C. Faloutsos: Unifying Guilt--Association Approaches: Theorems Fast Algorithms. ECML/PKDD (2) 2011: 245-260","code":""}]
