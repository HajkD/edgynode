% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/network_benchmark_noise_filtering.R
\name{network_benchmark_noise_filtering}
\alias{network_benchmark_noise_filtering}
\title{Benchmarking of noise filtering and normalization impact on network inference}
\usage{
network_benchmark_noise_filtering(
  adj_mat_raw_no_noise_removed_and_no_qnorm,
  adj_mat_raw_noise_removed_but_no_qnorm,
  adj_mat_no_noise_removed_but_qnorm,
  adj_mat_noise_removed_and_qnorm,
  grn_tool,
  threshold = "median",
  dist_type = "hamming",
  print_message = TRUE
)
}
\arguments{
\item{adj_mat_raw_no_noise_removed_and_no_qnorm}{a weighted adjacency matrix derived from a network inference program
where no noise-filtering or quantile-normalization was applied to the input data.}

\item{adj_mat_raw_noise_removed_but_no_qnorm}{a weighted adjacency matrix derived from a network inference program
where noise-filtering but no quantile-normalization was applied to the input data.}

\item{adj_mat_no_noise_removed_but_qnorm}{a weighted adjacency matrix derived from a network inference program
where no noise-filtering but quantile-normalization was applied to the input data.}

\item{adj_mat_noise_removed_and_qnorm}{a weighted adjacency matrix derived from a network inference program
where noise-filtering and quantile-normalization were applied to the input data.}

\item{grn_tool}{a character string specifying the gene regulatory network inference tool that was used to
generate input matrices.}

\item{threshold}{we recommended to use \code{\link{network_rescale}}
before using this function. Re-scaling will transform all values into a range [0,100].
The threshold can either be a numeric balue in the interval [0,100] or a character string
specifying the following methods for automatically determining the threshold based on the input data:
\itemize{
\item \code{threshold = "median"}: compute the \code{\link{median}} over the entire input \code{adj_mat} and use this
\code{median} value as threshold for defining all edge weights of a genes equal or below the \code{median}
value as \code{0} and all values above the \code{median} value as \code{1}.
}
See \code{\link{network_make_binary}} for details.}

\item{dist_type}{a distance method that shall be applied on the binary values for each gene. Available options are:
\itemize{
\item \code{dist_type = "hamming"}: computes the \code{\link[e1071]{hamming.distance}} for each gene between the two input matrices
\item \code{dist_type = "jaccard"}: computes the \code{\link[jaccard]{jaccard}} for each gene between the two input matrices
}
See \code{\link{network_dist_pairwise_genes}} for details.}

\item{print_message}{shall messages be printed?}
}
\description{
This function takes four types of matrices as input which
were generated with the same network inference tool (e.g. GENIE3), but had
different input data to the network inference tool in the context of
noise-filtering and quantile-normalization.
It is assumed that the four matrices inserted into this function come from
network inference runs with the following input data specifications:
\itemize{
\item Raw mapped RNAseq count data without noise-filtering or quantile-normalization applied (\code{adj_mat_raw_no_noise_removed_and_no_qnorm})
\item Raw mapped RNAseq count data with noise-filtering applied but no quantile-normalization (\code{adj_mat_raw_noise_removed_but_no_qnorm})
\item Raw mapped RNAseq count data without noise-filtering but with quantile-normalization applied (\code{adj_mat_no_noise_removed_but_qnorm})
\item Raw mapped RNAseq count data with noise-filtering applied and with quantile-normalization applied (\code{adj_mat_noise_removed_and_qnorm})
}

All relevant pairwise comparisons are then performed internally with \code{\link{network_dist_pairwise_genes}} based on gene-wise
Hamming Distance or Jaccard Similarity Coefficient computations.
}
\examples{
# Benchmark GENIE3 inferred networks with raw, no_noise, and quantile_norm combinations
genie3_49_raw <- as.matrix(read.csv(
system.file("data/network_raw_49_placenta_development.csv",
 package = "edgynode"), row.names = 1))

genie3_49_noNoiseCM_raw <- as.matrix(read.csv(
system.file("data/network_noNoiseCM_raw_49_placenta_development.csv",
 package = "edgynode"), row.names = 1))

genie3_49_qnorm_no_noise_removed <- as.matrix(read.csv(
system.file("data/network_qnorm_49_placenta_development.csv",
 package = "edgynode"), row.names = 1))

genie3_49_noNoiseCM_qnorm <- as.matrix(read.csv(
system.file("data/network_noNoiseCM_qnorm_49_placenta_development.csv",
 package = "edgynode"), row.names = 1))


# Run Benchmark using Hamming distance
benchmark_hamming <- network_benchmark_noise_filtering(
genie3_49_raw,
genie3_49_noNoiseCM_raw,
genie3_49_qnorm_no_noise_removed,
genie3_49_noNoiseCM_qnorm,
dist_type = "hamming",
grn_tool = "GENIE3")

# look at results
benchmark_hamming

# Run Benchmark using Jaccard Coefficients
benchmark_jaccard <- network_benchmark_noise_filtering(
genie3_49_raw,
genie3_49_noNoiseCM_raw,
genie3_49_qnorm_no_noise_removed,
genie3_49_noNoiseCM_qnorm,
dist_type = "jaccard",
grn_tool = "GENIE3")

# look at results
benchmark_jaccard
}
\author{
Hajk-Georg Drost
}
